!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/usr/usr/src/github/codePuzzlesAndPractices/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
Acquire	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^void Lock::Acquire()$/;"	f	class:Lock	typeref:typename:void
AddGold	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^    void AddGold(unsigned int gold)$/;"	f	class:Avatar	typeref:typename:void	file:
AddSample	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test1/main.cpp	/^void MovingAverage::AddSample(int sample)$/;"	f	class:MovingAverage	typeref:typename:void
Append	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/simple_text_editor_CPP/main.cpp	/^  Append = 1, \/\/ Append string W to the end of S$/;"	e	enum:Operation	file:
Avatar	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^    Avatar(unsigned int id){m_id = id; m_gold=0;};$/;"	f	class:Avatar	file:
Avatar	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^   Avatar(){$/;"	f	class:Avatar	file:
Avatar	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^class Avatar$/;"	c	file:
CellNode	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^        public CellNode(int x, int y, CellNode dChild, CellNode rChild)$/;"	m	class:Solution.CellNode
CellNode	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^    class CellNode$/;"	c	class:Solution
Center	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^    public readonly Point Center;$/;"	f	class:HelloWorld.HTree
DBGOUT	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/flip_matrix_CPP/main.cpp	/^#define DBGOUT /;"	d	file:
DBGOUT	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/sweetness_cookies_CPP/main.cpp	/^#define DBGOUT$/;"	d	file:
DChild	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^        LinkedList<CellNode> DChild;$/;"	f	class:Solution.Tree	file:
DChild	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^        public CellNode DChild;$/;"	f	class:Solution.CellNode
Delete	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/simple_text_editor_CPP/main.cpp	/^  Delete = 2, \/\/ Delete the last k characters of S$/;"	e	enum:Operation	file:
Depth	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^    public readonly double Depth;$/;"	f	class:HelloWorld.HTree
Dequeue	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^  TElement Dequeue() {$/;"	f	class:DualStacksQueue	typeref:typename:TElement	file:
DualStacksQueue	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^template <typename TElement> class DualStacksQueue {$/;"	c	file:
E0	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^        public CellNode E0;$/;"	f	class:Solution.Edge
E1	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^        public CellNode E1;$/;"	f	class:Solution.Edge
Edge	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^        public Edge(CellNode e0, CellNode e1)$/;"	m	class:Solution.Edge
Edge	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^    class Edge$/;"	c	class:Solution
Edges	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^        Edge[] Edges;$/;"	f	class:Solution.Tree	file:
Enqueue	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^  void Enqueue(TElement element) {$/;"	f	class:DualStacksQueue	typeref:typename:void	file:
FROM_PLAYER2	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^	FROM_PLAYER2,$/;"	e	enum:TransferDirection	file:
FixedSizeTable	/home/hidekiai/projects/github/codePuzzlesAndPractices/practice/HashTableWithArray/Program.cs	/^        Tuple<int, T>[] FixedSizeTable; \/\/ this is the fastest method, since you just do modul/;"	f	class:HashTableWithArray.HashTable	file:
GFG	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/kLargestElements/kLargestElements.cs	/^public class GFG $/;"	c
GOLD_LIMIT	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^const unsigned int GOLD_LIMIT = 1000;$/;"	v	typeref:typename:const unsigned int
GetAverage	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test1/main.cpp	/^int MovingAverage::GetAverage() const$/;"	f	class:MovingAverage	typeref:typename:int
GetGold	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^    unsigned int GetGold() const { return m_gold; }$/;"	f	class:Avatar	typeref:typename:unsigned int	file:
GetId	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^    unsigned int GetId() const { return m_id; }$/;"	f	class:Avatar	typeref:typename:unsigned int	file:
HTree	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^    public HTree(double centerX, double centerY, double length, double depth)$/;"	m	class:HelloWorld.HTree
HTree	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^  public sealed class HTree$/;"	c	class:HelloWorld
Hash	/home/hidekiai/projects/github/codePuzzlesAndPractices/practice/HashTableWithArray/Program.cs	/^        (int Hash, T Value)[]   NamedTupleTable;$/;"	f	class:HashTableWithArray.HashTable	file:
HashTable	/home/hidekiai/projects/github/codePuzzlesAndPractices/practice/HashTableWithArray/Program.cs	/^        int[] HashTable;$/;"	f	class:HashTableWithArray.HashTable	file:
HashTable	/home/hidekiai/projects/github/codePuzzlesAndPractices/practice/HashTableWithArray/Program.cs	/^        public HashTable(int blockSize)$/;"	m	class:HashTableWithArray.HashTable
HashTable	/home/hidekiai/projects/github/codePuzzlesAndPractices/practice/HashTableWithArray/Program.cs	/^    public class HashTable<T>$/;"	c	namespace:HashTableWithArray
HashTableWithArray	/home/hidekiai/projects/github/codePuzzlesAndPractices/practice/HashTableWithArray/Program.cs	/^namespace HashTableWithArray$/;"	n
HelloWorld	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^class HelloWorld$/;"	c
HorizontalLine	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^    public readonly Line HorizontalLine;$/;"	f	class:HelloWorld.HTree
Insert	/home/hidekiai/projects/github/codePuzzlesAndPractices/practice/HashTableWithArray/Program.cs	/^        public bool Insert(T value)$/;"	m	class:HashTableWithArray.HashTable
IsEmpty	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^    bool IsEmpty() { return elements.empty(); }$/;"	f	class:DualStacksQueue::Stack	typeref:typename:bool	file:
Length	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^    public readonly double Length;$/;"	f	class:HelloWorld.HTree
Line	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^      public Line(Point p1, Point p2)$/;"	m	class:HelloWorld.HTree.Line
Line	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^    public sealed class Line$/;"	c	class:HelloWorld.HTree
Lock	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^class Lock$/;"	c	file:
Main	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/kLargestElements/kLargestElements.cs	/^	static public void Main ()$/;"	m	class:GFG
Main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/Array2DDS/ArrayDS.cs	/^    static void Main(string[] args) {$/;"	m	class:Solution	file:
Main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/CloudJumping/CloudJumping.cs	/^	static void Main(string[] args) {$/;"	m	class:Solution	file:
Main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/CountingValleys/CountingValleys.cs	/^    static void Main(string[] args)$/;"	m	class:Solution	file:
Main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^    static void Main(string[] args) {$/;"	m	class:Solution	file:
Main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/LeftRotation/LeftRotation.cs	/^	static void Main(string[] args) {$/;"	m	class:Solution	file:
Main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/MagicSquare/MagicSquare.cs	/^	static void Main(string[] args) {$/;"	m	class:Solution	file:
Main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/MinimumDistance/MinDistance.cs	/^    static void Main(string[] args) {$/;"	m	class:Solution	file:
Main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/NewYearChaos/NewYearChaos.cs	/^	static void Main(string[] args) {$/;"	m	class:Solution	file:
Main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/RepeatedString/RepeatedString.cs	/^    static void Main(string[] args)$/;"	m	class:Solution	file:
Main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/SockMerchant/SockMerchant.cs	/^    static void Main(string[] args)$/;"	m	class:Solution	file:
Main	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^    static void Main()$/;"	m	class:HelloWorld	file:
Main	/home/hidekiai/projects/github/codePuzzlesAndPractices/amazon/test/test1/Program.cs	/^        static void Main(string[] args)$/;"	m	class:test1.Program	file:
Main	/home/hidekiai/projects/github/codePuzzlesAndPractices/amazon/test/test2/Program.cs	/^        static void Main(string[] args)$/;"	m	class:test2.Program	file:
Main	/home/hidekiai/projects/github/codePuzzlesAndPractices/practice/HashTableWithArray/Program.cs	/^        static void Main(string[] args)$/;"	m	class:HashTableWithArray.Program	file:
MovingAverage	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test1/main.cpp	/^MovingAverage::MovingAverage()$/;"	f	class:MovingAverage
MovingAverage	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test1/main.cpp	/^class MovingAverage$/;"	c	file:
NamedTupleTable	/home/hidekiai/projects/github/codePuzzlesAndPractices/practice/HashTableWithArray/Program.cs	/^        (int Hash, T Value)[]   NamedTupleTable;$/;"	f	class:HashTableWithArray.HashTable	file:
Node	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/deleteWithoutHeaderPointer/deleteWithoutHeaderPtr.cpp	/^struct Node$/;"	s	file:
Node	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/heightOfTree/heightOfTree.cpp	/^struct Node$/;"	s	file:
Node	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_preorder_traversal_CPP/main.cpp	/^  Node(int d) {$/;"	f	class:Node	file:
Node	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_preorder_traversal_CPP/main.cpp	/^class Node {$/;"	c	file:
Operation	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/simple_text_editor_CPP/main.cpp	/^enum Operation {$/;"	g	file:
P1	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^      public readonly Point P1;$/;"	f	class:HelloWorld.HTree.Line
P2	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^      public readonly Point P2;$/;"	f	class:HelloWorld.HTree.Line
Peek_bottom	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^    TElement Peek_bottom() { return *elements.begin(); }$/;"	f	class:DualStacksQueue::Stack	typeref:typename:TElement	file:
Point	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^      public Point(double x, double y)$/;"	m	class:HelloWorld.HTree.Point
Point	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^    public sealed class Point$/;"	c	class:HelloWorld.HTree
Pop	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test2/main.cpp	/^    int Pop() \/\/ will never get called more than Push$/;"	f	class:Stack	typeref:typename:int	file:
Pop	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^    TElement Pop() {$/;"	f	class:DualStacksQueue::Stack	typeref:typename:TElement	file:
Print	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^  void Print() {$/;"	f	class:DualStacksQueue	typeref:typename:void	file:
Print	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/simple_text_editor_CPP/main.cpp	/^  Print = 3,  \/\/ Print the k-th character of S$/;"	e	enum:Operation	file:
Program	/home/hidekiai/projects/github/codePuzzlesAndPractices/amazon/test/test1/Program.cs	/^    class Program$/;"	c	namespace:test1
Program	/home/hidekiai/projects/github/codePuzzlesAndPractices/amazon/test/test2/Program.cs	/^    class Program$/;"	c	namespace:test2
Program	/home/hidekiai/projects/github/codePuzzlesAndPractices/practice/HashTableWithArray/Program.cs	/^    public static class Program$/;"	c	namespace:HashTableWithArray
Push	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test2/main.cpp	/^    void Push(int n)$/;"	f	class:Stack	typeref:typename:void	file:
Push	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^    void Push(TElement element) { elements.push_back(element); }$/;"	f	class:DualStacksQueue::Stack	typeref:typename:void	file:
RChild	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^        LinkedList<CellNode> RChild;$/;"	f	class:Solution.Tree	file:
RChild	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^        public CellNode RChild;$/;"	f	class:Solution.CellNode
Release	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^void Lock::Release()$/;"	f	class:Lock	typeref:typename:void
RemoveGold	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^    void RemoveGold(unsigned int gold)$/;"	f	class:Avatar	typeref:typename:void	file:
Root	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^        CellNode Root;$/;"	f	class:Solution.Tree	file:
SinglyLinkedList	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^  SinglyLinkedList() {$/;"	f	class:SinglyLinkedList	file:
SinglyLinkedList	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^class SinglyLinkedList {$/;"	c	file:
SinglyLinkedListNode	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^  SinglyLinkedListNode(int node_data) {$/;"	f	class:SinglyLinkedListNode	file:
SinglyLinkedListNode	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^class SinglyLinkedListNode {$/;"	c	file:
Solution	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/Array2DDS/ArrayDS.cs	/^class Solution {$/;"	c
Solution	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/CloudJumping/CloudJumping.cs	/^class Solution {$/;"	c
Solution	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/CountingValleys/CountingValleys.cs	/^class Solution$/;"	c
Solution	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^class Solution {$/;"	c
Solution	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/LeftRotation/LeftRotation.cs	/^class Solution {$/;"	c
Solution	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/MagicSquare/MagicSquare.cs	/^class Solution {$/;"	c
Solution	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/MinimumDistance/MinDistance.cs	/^class Solution {$/;"	c
Solution	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/NewYearChaos/NewYearChaos.cs	/^class Solution {$/;"	c
Solution	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/RepeatedString/RepeatedString.cs	/^class Solution$/;"	c
Solution	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/SockMerchant/SockMerchant.cs	/^class Solution$/;"	c
Solution	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_preorder_traversal_CPP/main.cpp	/^class Solution {$/;"	c	file:
Solution	/home/hidekiai/projects/github/codePuzzlesAndPractices/amazon/practice/neighbors/Program.cs	/^    public class Solution$/;"	c	namespace:neighbors
Solution/solving for GeeksForGeeks.org, Amazon, HackerRank, etc	/home/hidekiai/projects/github/codePuzzlesAndPractices/README.md	/^# Solution\/solving for GeeksForGeeks.org, Amazon, HackerRank, etc$/;"	c
Stack	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test2/main.cpp	/^    Stack(){current_stack_index = 0; current_stack_tail = 0;}$/;"	f	class:Stack	file:
Stack	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test2/main.cpp	/^class Stack $/;"	c	file:
Stack	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^  class Stack {$/;"	c	class:DualStacksQueue	file:
TEST	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/kLargestElements/kLargestElements.cs	/^#define TEST$/;"	d	file:
TO_PLAYER2	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^	TO_PLAYER2,$/;"	e	enum:TransferDirection	file:
Transfer	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^    static bool Transfer(Avatar& from, Avatar& to, unsigned int gold)$/;"	f	class:Avatar	typeref:typename:bool	file:
Transfer	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^struct Transfer$/;"	s	file:
TransferDirection	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^enum TransferDirection$/;"	g	file:
Tree	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^    class Tree$/;"	c	class:Solution
TupleTable	/home/hidekiai/projects/github/codePuzzlesAndPractices/practice/HashTableWithArray/Program.cs	/^        Tuple<int, T>[] TupleTable;$/;"	f	class:HashTableWithArray.HashTable	file:
Undefined	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/simple_text_editor_CPP/main.cpp	/^  Undefined = 0,$/;"	e	enum:Operation	file:
Undo	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/simple_text_editor_CPP/main.cpp	/^  Undo = 4    \/\/ Undo the last (not previously undone) operation of type 1 or 2,$/;"	e	enum:Operation	file:
Values	/home/hidekiai/projects/github/codePuzzlesAndPractices/practice/HashTableWithArray/Program.cs	/^        T[] Values;$/;"	f	class:HashTableWithArray.HashTable	file:
VerticalLineLeft	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^    public readonly Line VerticalLineLeft;$/;"	f	class:HelloWorld.HTree
VerticalLineRight	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^    public readonly Line VerticalLineRight;$/;"	f	class:HelloWorld.HTree
W	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test1/main.cpp	/^    enum { W = 10 };$/;"	e	enum:MovingAverage::__anon229f4d240103	file:
X	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^        public int X;$/;"	f	class:Solution.CellNode
X	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^      public readonly double X;$/;"	f	class:HelloWorld.HTree.Point
Y	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^        public int Y;$/;"	f	class:Solution.CellNode
Y	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^      public readonly double Y;$/;"	f	class:HelloWorld.HTree.Point
__anon058ee71e0102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/balanced_brackets_CPP/main.cpp	/^                             vector<tuple<char, char>> kBrackets) {$/;"	f	function:isBalanced	file:
__anon0e79ffdd0102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/recursive_digit_sum_CPP/test.cpp	/^  auto partition_string = [](const string &s, int partition_size) {$/;"	f	function:superDigit	file:
__anon0e79ffdd0202	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/recursive_digit_sum_CPP/test.cpp	/^      [&](const string &string_block) -> uint64_t {$/;"	f	function:superDigit	typeref:typename:uint64_t	file:
__anon0e79ffdd0302	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/recursive_digit_sum_CPP/test.cpp	/^             [&sum, &recursive_super_digit](const string &s) {$/;"	f	function:superDigit::__anon0e79ffdd0202	file:
__anon11632c930102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/ceaser_cipher_CPP/main.cpp	/^  auto shift_char = [](char c, int shift) {$/;"	f	function:caesarCipher	file:
__anon166834130102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/sweetness_cookies_CPP/main.cpp	/^  auto are_all_cookies_sweet_enough = [&A, k]() {$/;"	f	function:cookies	file:
__anon166834130202	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/sweetness_cookies_CPP/main.cpp	/^  auto decrement_distinct_list = [&distinct_sweetness_levels](const int key) {$/;"	f	function:cookies	file:
__anon166834130302	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/sweetness_cookies_CPP/main.cpp	/^                                  &A](const int key) {$/;"	f	function:cookies	file:
__anon166834130402	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/sweetness_cookies_CPP/main.cpp	/^                          &increment_distinct_list]() {$/;"	f	function:cookies	file:
__anon166834130502	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/sweetness_cookies_CPP/main.cpp	/^  auto find_least_sweet_cookies = [&distinct_sweetness_levels]() {$/;"	f	function:cookies	file:
__anon166834130602	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/sweetness_cookies_CPP/main.cpp	/^          const std::pair<int, int> &last_known_smallest_sweetness) {$/;"	f	function:cookies	file:
__anon22533f320102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tower_breaker_CPP/main.cpp	/^  auto pick_tower_height = [](int tower_height) {$/;"	f	function:towerBreakers	file:
__anon229f4d240103	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test1/main.cpp	/^    enum { W = 10 };$/;"	g	class:MovingAverage	file:
__anon244f3d650102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/flip_matrix_CPP/main.cpp	/^  auto sum_quadrants = [](const vector<vector<int>> &matrix) {$/;"	f	function:flippingMatrix	file:
__anon244f3d650202	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/flip_matrix_CPP/main.cpp	/^  auto dump_matrix = [](const vector<vector<int>> &matrix) {$/;"	f	function:flippingMatrix	file:
__anon244f3d650302	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/flip_matrix_CPP/main.cpp	/^  auto dump_quadrants = [](const tuple<long, long, long, long> &quadrants) {$/;"	f	function:flippingMatrix	file:
__anon244f3d650402	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/flip_matrix_CPP/main.cpp	/^  auto flip_q2_to_q1 = [](vector<vector<int>> &matrix) {$/;"	f	function:flippingMatrix	file:
__anon244f3d650502	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/flip_matrix_CPP/main.cpp	/^  auto flip_q4_to_q3 = [](vector<vector<int>> &matrix) {$/;"	f	function:flippingMatrix	file:
__anon244f3d650602	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/flip_matrix_CPP/main.cpp	/^  auto flip_q4_to_q2 = [](vector<vector<int>> &matrix) {$/;"	f	function:flippingMatrix	file:
__anon244f3d650702	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/flip_matrix_CPP/main.cpp	/^  auto q1_is_biggest = [](tuple<long, long, long, long> &quadrants) {$/;"	f	function:flippingMatrix	file:
__anon244f3d650802	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/flip_matrix_CPP/main.cpp	/^       &flip_q4_to_q2](int index) -> void {$/;"	f	function:flippingMatrix	typeref:typename:void	file:
__anon37300c7a0102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/palindrome_mocktest_CPP/main.cpp	/^  auto are_equal = [](const string &left, const string &right) {$/;"	f	function:palindromeIndex	file:
__anon37300c7a0202	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/palindrome_mocktest_CPP/main.cpp	/^  auto make_left_and_right = [](const string &s, string &left, string &right) {$/;"	f	function:palindromeIndex	file:
__anon3c69bbce0102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/pairs_mocktest_CPP/main.cpp	/^  auto calc_difference = [&k](int left, int right) -> bool {$/;"	f	function:pairs	typeref:typename:bool	file:
__anon4d0411620102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/recursive_digit_sum_CPP/main.cpp	/^      [&](const string &s) -> uint64_t {$/;"	f	function:superDigit	typeref:typename:uint64_t	file:
__anon5fd9fba20102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/TruckTour_mockTest_CPP/main.cpp	/^  auto get_pump_info = [](const vector<int> &pump) {$/;"	f	function:truckTour	file:
__anon5fd9fba20202	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/TruckTour_mockTest_CPP/main.cpp	/^  auto get_petrol_amount = [](const pair<int, int> &pump_info) {$/;"	f	function:truckTour	file:
__anon5fd9fba20302	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/TruckTour_mockTest_CPP/main.cpp	/^  auto get_distance = [](const pair<int, int> &pump_info) {$/;"	f	function:truckTour	file:
__anon5fd9fba20402	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/TruckTour_mockTest_CPP/main.cpp	/^                      int current_pump_index, int tank_level) -> int {$/;"	f	function:truckTour	typeref:typename:int	file:
__anon5fd9fba20502	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/TruckTour_mockTest_CPP/main.cpp	/^                       const pair<size_t, pair<int, int>> &b) {$/;"	f	function:truckTour	file:
__anon5fd9fba20602	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/TruckTour_mockTest_CPP/main.cpp	/^       &travel_and_validate](const auto &current) {$/;"	f	function:truckTour	file:
__anon762a7fba0102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/simple_text_editor_CPP/main.cpp	/^  auto do_append = [](string &S, const string &W, vector<string> &undo_stack) {$/;"	f	function:main	file:
__anon762a7fba0202	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/simple_text_editor_CPP/main.cpp	/^  auto do_delete = [](string &S, const int k, vector<string> &undo_stack) {$/;"	f	function:main	file:
__anon762a7fba0302	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/simple_text_editor_CPP/main.cpp	/^  auto do_print = [](const string &S, const int k) {$/;"	f	function:main	file:
__anon762a7fba0402	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/simple_text_editor_CPP/main.cpp	/^  auto do_undo = [](string &S, vector<string> &undo_stack) {$/;"	f	function:main	file:
__anon959de3e20102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/mock_breadth_first_search_shortest_reach_CPP/main.cpp	/^  auto get_nodes = [edges]() {$/;"	f	function:bfs	file:
__anon959de3e20202	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/mock_breadth_first_search_shortest_reach_CPP/main.cpp	/^  auto make_distance_element = [](int i, int j, int distance) {$/;"	f	function:bfs	file:
__anon959de3e20302	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/mock_breadth_first_search_shortest_reach_CPP/main.cpp	/^  auto calc_distance_from_node = [s, &edges, get_nodes, &distances]() {$/;"	f	function:bfs	file:
__anon9c2083010102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^  for_each(vec1.begin(), vec1.end(), [&llist1](const auto &current) {$/;"	f	function:test	file:
__anon9c2083010202	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^  for_each(vec2.begin(), vec2.end(), [&llist2](const auto &current) {$/;"	f	function:test	file:
__anon9c2083010302	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^           [](const auto &current) { cout << current << " "; });$/;"	f	function:test	file:
__anon9d8df0ce0102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/grid_challenge_CPP/main.cpp	/^  auto get_columns = [](const vector<string> &grid) {$/;"	f	function:gridChallenge	file:
__anon9d8df0ce0202	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/grid_challenge_CPP/main.cpp	/^  auto is_ascending = [](const string &s) {$/;"	f	function:gridChallenge	file:
__anonc9a48c4d0102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/new_year_chaos_CPP/main.cpp	/^  auto find_index = [](const vector<int> &q, int value) {$/;"	f	function:minimumBribes	file:
__anonc9a48c4d0202	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/new_year_chaos_CPP/main.cpp	/^  auto count_bribes = [](const vector<int> &q, int current_person_queue_index) {$/;"	f	function:minimumBribes	file:
__anone3b225b60102	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_Huffman_decoding_CPP/main.cpp	/^    function<void(node*, int)> visit = [&](node *node, int si) {$/;"	f	function:decode_huff	file:
bfs	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/mock_breadth_first_search_shortest_reach_CPP/main.cpp	/^vector<int> bfs(int n, int m, vector<vector<int>> edges, int s) {$/;"	f	typeref:typename:vector<int>
caesarCipher	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/ceaser_cipher_CPP/main.cpp	/^string caesarCipher(string s, int k) {$/;"	f	typeref:typename:string
cellCompete	/home/hidekiai/projects/github/codePuzzlesAndPractices/amazon/practice/neighbors/Program.cs	/^        public int[] cellCompete(int[] states, int days)$/;"	m	class:neighbors.Solution
cookies	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/sweetness_cookies_CPP/main.cpp	/^int cookies(int k, vector<int> A) {$/;"	f	typeref:typename:int
count	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test1/main.cpp	/^    long long count;$/;"	m	class:MovingAverage	typeref:typename:long long	file:
count	/home/hidekiai/projects/github/codePuzzlesAndPractices/practice/HashTableWithArray/Program.cs	/^        int count;  \/\/ for compartors and iterations$/;"	f	class:HashTableWithArray.HashTable	file:
countingValleys	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/CountingValleys/CountingValleys.cs	/^    static int countingValleys(int n, string s)$/;"	m	class:Solution	file:
current_stack_index	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test2/main.cpp	/^    int current_stack_index = 0;$/;"	m	class:Stack	typeref:typename:int	file:
current_stack_tail	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test2/main.cpp	/^    int current_stack_tail = 0;$/;"	m	class:Stack	typeref:typename:int	file:
data	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/deleteWithoutHeaderPointer/deleteWithoutHeaderPtr.cpp	/^    int data;$/;"	m	struct:Node	typeref:typename:int	file:
data	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/heightOfTree/heightOfTree.cpp	/^    int data;$/;"	m	struct:Node	typeref:typename:int	file:
data	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^  int data;$/;"	m	class:SinglyLinkedListNode	typeref:typename:int	file:
data	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_Huffman_decoding_CPP/main.cpp	/^    char data;$/;"	m	struct:node	typeref:typename:char	file:
data	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_preorder_traversal_CPP/main.cpp	/^  int data;$/;"	m	class:Node	typeref:typename:int	file:
decode_huff	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_Huffman_decoding_CPP/main.cpp	/^void decode_huff(node * root, string s) {$/;"	f	typeref:typename:void
deleteNode	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/deleteWithoutHeaderPointer/deleteWithoutHeaderPtr.cpp	/^void deleteNode(Node *node)$/;"	f	typeref:typename:void
deref	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_Huffman_decoding_CPP/main.cpp	/^struct deref:public binary_function<node*, node*, bool> {$/;"	s	file:
diffLuoShu	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/MagicSquare/MagicSquare.cs	/^	static Tuple<int[][], int> diffLuoShu(int[][] s)$/;"	m	class:Solution	file:
doIt	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/kLargestElements/kLargestElements.cs	/^    private static int[] doIt(int takeCount, int[] iData) =>$/;"	m	class:GFG	file:
doTransfer	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^void doTransfer($/;"	f	typeref:typename:void
drawHLines	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^  static void drawHLines(HTree ht)$/;"	m	class:HelloWorld	file:
drawLine	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^  static void drawLine(double depth, HTree.Point p1, HTree.Point p2)$/;"	m	class:HelloWorld	file:
drawTree	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^  static void drawTree(double centerX, double centerY, double length, double depth)$/;"	m	class:HelloWorld	file:
elements	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^    vector<TElement> elements; \/\/ best we will do is push_back and pop_back$/;"	m	class:DualStacksQueue::Stack	typeref:typename:vector<TElement>	file:
findNode	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/deleteWithoutHeaderPointer/deleteWithoutHeaderPtr.cpp	/^Node *findNode(Node* head, int search_for)$/;"	f	typeref:typename:Node *
findZigZagSequence	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/zigzag_sequence_cpp/main.cpp	/^void findZigZagSequence(vector < int > a, int n){$/;"	f	typeref:typename:void
flippingMatrix	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/flip_matrix_CPP/main.cpp	/^int flippingMatrix(vector<vector<int>> matrix) {$/;"	f	typeref:typename:int
formingMagicSquare	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/MagicSquare/MagicSquare.cs	/^	static int formingMagicSquare(int[][] s) {$/;"	m	class:Solution	file:
free_singly_linked_list	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^void free_singly_linked_list(SinglyLinkedListNode *node) {$/;"	f	typeref:typename:void
freq	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_Huffman_decoding_CPP/main.cpp	/^  	int freq;$/;"	m	struct:node	typeref:typename:int	file:
gcd	/home/hidekiai/projects/github/codePuzzlesAndPractices/amazon/practice/gcd/Program.cs	/^namespace gcd$/;"	n
generalizedGCD	/home/hidekiai/projects/github/codePuzzlesAndPractices/amazon/practice/gcd/Program.cs	/^    public int generalizedGCD(int num, int[] arr)$/;"	m	namespace:gcd
getLuoShuSquare	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/MagicSquare/MagicSquare.cs	/^	static int[][] getLuoShuSquare()$/;"	m	class:Solution	file:
gold1	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^	unsigned int gold1;$/;"	m	struct:Transfer	typeref:typename:unsigned int	file:
gold2	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^	unsigned int gold2;$/;"	m	struct:Transfer	typeref:typename:unsigned int	file:
gridChallenge	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/grid_challenge_CPP/main.cpp	/^string gridChallenge(vector<string> grid) {$/;"	f	typeref:typename:string
head	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/deleteWithoutHeaderPointer/deleteWithoutHeaderPtr.cpp	/^}*head;$/;"	v	typeref:struct:Node *
head	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^  SinglyLinkedListNode *head;$/;"	m	class:SinglyLinkedList	typeref:typename:SinglyLinkedListNode *	file:
height	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/heightOfTree/heightOfTree.cpp	/^int height(Node* node)$/;"	f	typeref:typename:int
hourglassSum	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/Array2DDS/ArrayDS.cs	/^    static int hourglassSum(int[][] arr) {$/;"	m	class:Solution	file:
huffman_hidden	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_Huffman_decoding_CPP/main.cpp	/^node * huffman_hidden(string s) {$/;"	f	typeref:typename:node *
in_stack	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^  Stack in_stack;$/;"	m	class:DualStacksQueue	typeref:typename:Stack	file:
inorder	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/heightOfTree/heightOfTree.cpp	/^void inorder(Node *root)$/;"	f	typeref:typename:void
inputs	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/kLargestElements/kLargestElements.cs	/^	static string[]	inputs = new string[]$/;"	f	class:GFG	file:
insert	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/deleteWithoutHeaderPointer/deleteWithoutHeaderPtr.cpp	/^void insert()$/;"	f	typeref:typename:void
insert	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_preorder_traversal_CPP/main.cpp	/^  Node *insert(Node *root, int data) {$/;"	f	class:Solution	typeref:typename:Node *	file:
insert_node	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^  void insert_node(int node_data) {$/;"	f	class:SinglyLinkedList	typeref:typename:void	file:
isBalanced	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/balanced_brackets_CPP/main.cpp	/^string isBalanced(string s) {$/;"	f	typeref:typename:string
jumpingOnClouds	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/CloudJumping/CloudJumping.cs	/^	static int jumpingOnClouds(int[] c) {$/;"	m	class:Solution	file:
kBlockSize	/home/hidekiai/projects/github/codePuzzlesAndPractices/practice/HashTableWithArray/Program.cs	/^        int kBlockSize = 16; \/\/ dynamically grow array, when Insert is called, it is O(16 * bl/;"	f	class:HashTableWithArray.HashTable	file:
kDequeue	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^const int kDequeue = 2;$/;"	v	typeref:typename:const int
kEnqueue	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^const int kEnqueue = 1;$/;"	v	typeref:typename:const int
kFixedArraySize	/home/hidekiai/projects/github/codePuzzlesAndPractices/practice/HashTableWithArray/Program.cs	/^        int kFixedArraySize = 1024;$/;"	f	class:HashTableWithArray.HashTable	file:
kPrint	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^const int kPrint = 3;$/;"	v	typeref:typename:const int
knightlOnAChessboard	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/KnightL/KnightL.cs	/^    static int[][] knightlOnAChessboard(int n) {$/;"	m	class:Solution	file:
l10_index	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test1/main.cpp	/^    size_t l10_index = 0;$/;"	m	class:MovingAverage	typeref:typename:size_t	file:
last_10_samples	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test1/main.cpp	/^    int last_10_samples[W]; \/\/ circular queue$/;"	m	class:MovingAverage	typeref:typename:int[]	file:
last_10_total	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test1/main.cpp	/^    long long last_10_total = 0;$/;"	m	class:MovingAverage	typeref:typename:long long	file:
left	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/heightOfTree/heightOfTree.cpp	/^    struct Node* left;$/;"	m	struct:Node	typeref:struct:Node *	file:
left	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_Huffman_decoding_CPP/main.cpp	/^    node * left;$/;"	m	struct:node	typeref:typename:node *	file:
left	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_preorder_traversal_CPP/main.cpp	/^  Node *left;$/;"	m	class:Node	typeref:typename:Node *	file:
legoBlocks	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/lego_blocks_CPP/main.cpp	/^int legoBlocks(int n, int m) {$/;"	f	typeref:typename:int
lineIndex	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/kLargestElements/kLargestElements.cs	/^    static int lineIndex = 0;$/;"	f	class:GFG	file:
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/TruckTour_mockTest_CPP/main.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/balanced_brackets_CPP/main.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/ceaser_cipher_CPP/main.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/flip_matrix_CPP/main.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/grid_challenge_CPP/main.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/lego_blocks_CPP/main.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/mock_breadth_first_search_shortest_reach_CPP/main.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/new_year_chaos_CPP/main.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/no_prefix_set_CPP/main.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/pairs_mocktest_CPP/main.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/palindrome_mocktest_CPP/main.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/plusMinus_cpp/main.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/recursive_digit_sum_CPP/main.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/recursive_digit_sum_CPP/test.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/sweetness_cookies_CPP/main.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
ltrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tower_breaker_CPP/main.cpp	/^string ltrim(const string &str) {$/;"	f	typeref:typename:string
m_Lock	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^    Lock m_Lock;    \/\/ reentrent MUTEX so as long as it's locked again from same thread id$/;"	m	class:Avatar	typeref:typename:Lock	file:
m_gold	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^    unsigned int m_gold;$/;"	m	class:Avatar	typeref:typename:unsigned int	file:
m_id	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^    unsigned int m_id;$/;"	m	class:Avatar	typeref:typename:unsigned int	file:
m_mutex	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^    std::recursive_mutex m_mutex;$/;"	m	class:Lock	typeref:typename:std::recursive_mutex	file:
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/deleteWithoutHeaderPointer/deleteWithoutHeaderPtr.cpp	/^int main(void)$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/heightOfTree/heightOfTree.cpp	/^int main()$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test1/main.cpp	/^int main()$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test2/main.cpp	/^int main()$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/ForLoop_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/TruckTour_mockTest_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/balanced_brackets_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/ceaser_cipher_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/flip_matrix_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/grid_challenge_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/lego_blocks_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/mock_breadth_first_search_shortest_reach_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/new_year_chaos_CPP/main.cpp	/^int main()$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/no_prefix_set_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/pairs_mocktest_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/palindrome_mocktest_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/plusMinus_cpp/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/recursive_digit_sum_CPP/main.cpp	/^int main()$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/recursive_digit_sum_CPP/test.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/simple_text_editor_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/sweetness_cookies_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tower_breaker_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_Huffman_decoding_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_preorder_traversal_CPP/main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/zigzag_sequence_cpp/main.cpp	/^int main() {$/;"	f	typeref:typename:int
mergeLists	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^SinglyLinkedListNode *mergeLists(SinglyLinkedListNode *head1,$/;"	f	typeref:typename:SinglyLinkedListNode *
minimumBribes	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/NewYearChaos/NewYearChaos.cs	/^	static void minimumBribes(int[] q) {$/;"	m	class:Solution	file:
minimumBribes	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/new_year_chaos_CPP/main.cpp	/^void minimumBribes(vector<int> q) {$/;"	f	typeref:typename:void
minimumDistances	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/MinimumDistance/MinDistance.cs	/^    static int minimumDistances(int[] a) {$/;"	m	class:Solution	file:
neighbors	/home/hidekiai/projects/github/codePuzzlesAndPractices/amazon/practice/neighbors/Program.cs	/^namespace neighbors$/;"	n
newNode	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/heightOfTree/heightOfTree.cpp	/^struct Node* newNode(int data)$/;"	f	typeref:struct:Node *
next	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/deleteWithoutHeaderPointer/deleteWithoutHeaderPtr.cpp	/^    Node* next;$/;"	m	struct:Node	typeref:typename:Node *	file:
next	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^  SinglyLinkedListNode *next;$/;"	m	class:SinglyLinkedListNode	typeref:typename:SinglyLinkedListNode *	file:
noPrefix	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/no_prefix_set_CPP/main.cpp	/^void noPrefix(vector<string> words) {$/;"	f	typeref:typename:void
node	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_Huffman_decoding_CPP/main.cpp	/^typedef struct node {$/;"	s	file:
node	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_Huffman_decoding_CPP/main.cpp	/^} node;$/;"	t	typeref:struct:node	file:
operator ()	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_Huffman_decoding_CPP/main.cpp	/^  	bool operator()(const node * a, const node * b)const {$/;"	f	struct:deref	typeref:typename:bool	file:
out_stack	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/queue_dual_stacks_CPP/main.cpp	/^  Stack out_stack; \/\/ should always be empty when we dequeue (once head is$/;"	m	class:DualStacksQueue	typeref:typename:Stack	file:
pairs	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/pairs_mocktest_CPP/main.cpp	/^int pairs(int k, vector<int> arr) {$/;"	f	typeref:typename:int
palindromeIndex	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/palindrome_mocktest_CPP/main.cpp	/^int palindromeIndex(string s) {$/;"	f	typeref:typename:int
plusMinus	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/plusMinus_cpp/main.cpp	/^void plusMinus(vector<int> arr) {$/;"	f	typeref:typename:void
preOrder	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_preorder_traversal_CPP/main.cpp	/^  void preOrder(Node *root) { visit(root); }$/;"	f	class:Solution	typeref:typename:void	file:
printList	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/deleteWithoutHeaderPointer/deleteWithoutHeaderPtr.cpp	/^void printList(Node *node)$/;"	f	typeref:typename:void
print_codes_hidden	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_Huffman_decoding_CPP/main.cpp	/^void print_codes_hidden(node * root, string code, map<char, string>&mp) {$/;"	f	typeref:typename:void
print_singly_linked_list	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^void print_singly_linked_list(SinglyLinkedListNode *node, string sep,$/;"	f	typeref:typename:void
readData	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/kLargestElements/kLargestElements.cs	/^    private static int[] readData(int expectedCount)$/;"	m	class:GFG	file:
reorient	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/MagicSquare/MagicSquare.cs	/^	static Tuple<int[][], int> reorient(int[][] original)$/;"	m	class:Solution	file:
repeatedString	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/RepeatedString/RepeatedString.cs	/^    static long repeatedString(string s, long n)$/;"	m	class:Solution	file:
right	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/heightOfTree/heightOfTree.cpp	/^    struct Node* right;$/;"	m	struct:Node	typeref:struct:Node *	file:
right	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_Huffman_decoding_CPP/main.cpp	/^    node * right;$/;"	m	struct:node	typeref:typename:node *	file:
right	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_preorder_traversal_CPP/main.cpp	/^  Node *right;$/;"	m	class:Node	typeref:typename:Node *	file:
rotLeft	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/LeftRotation/LeftRotation.cs	/^	static int[] rotLeft(int[] a, int d) {$/;"	m	class:Solution	file:
rotateLuoShu	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/MagicSquare/MagicSquare.cs	/^	static int[][] rotateLuoShu(int[][] s)$/;"	m	class:Solution	file:
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/TruckTour_mockTest_CPP/main.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/balanced_brackets_CPP/main.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/ceaser_cipher_CPP/main.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/flip_matrix_CPP/main.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/grid_challenge_CPP/main.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/lego_blocks_CPP/main.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/mock_breadth_first_search_shortest_reach_CPP/main.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/new_year_chaos_CPP/main.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/no_prefix_set_CPP/main.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/pairs_mocktest_CPP/main.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/palindrome_mocktest_CPP/main.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/plusMinus_cpp/main.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/recursive_digit_sum_CPP/main.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/recursive_digit_sum_CPP/test.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/sweetness_cookies_CPP/main.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
rtrim	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tower_breaker_CPP/main.cpp	/^string rtrim(const string &str) {$/;"	f	typeref:typename:string
sockMerchant	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/SockMerchant/SockMerchant.cs	/^    static int sockMerchant(int n, int[] ar)$/;"	m	class:Solution	file:
split	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/TruckTour_mockTest_CPP/main.cpp	/^vector<string> split(const string &str) {$/;"	f	typeref:typename:vector<string>
split	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/flip_matrix_CPP/main.cpp	/^vector<string> split(const string &str) {$/;"	f	typeref:typename:vector<string>
split	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/lego_blocks_CPP/main.cpp	/^vector<string> split(const string &str) {$/;"	f	typeref:typename:vector<string>
split	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/mock_breadth_first_search_shortest_reach_CPP/main.cpp	/^vector<string> split(const string &str) {$/;"	f	typeref:typename:vector<string>
split	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/new_year_chaos_CPP/main.cpp	/^vector<string> split(const string &str) {$/;"	f	typeref:typename:vector<string>
split	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/pairs_mocktest_CPP/main.cpp	/^vector<string> split(const string &str) {$/;"	f	typeref:typename:vector<string>
split	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/plusMinus_cpp/main.cpp	/^vector<string> split(const string &str) {$/;"	f	typeref:typename:vector<string>
split	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/recursive_digit_sum_CPP/main.cpp	/^vector<string> split(const string &str) {$/;"	f	typeref:typename:vector<string>
split	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/recursive_digit_sum_CPP/test.cpp	/^vector<string> split(const string &str) {$/;"	f	typeref:typename:vector<string>
split	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/sweetness_cookies_CPP/main.cpp	/^vector<string> split(const string &str) {$/;"	f	typeref:typename:vector<string>
split	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tower_breaker_CPP/main.cpp	/^vector<string> split(const string &str) {$/;"	f	typeref:typename:vector<string>
spq	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_Huffman_decoding_CPP/main.cpp	/^typedef priority_queue<node *,vector<node*>, deref> spq;$/;"	t	typeref:typename:priority_queue<node *,vector<node * >,deref>	file:
stack	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test2/main.cpp	/^    int stack[256][1024*4];  \/\/ 4K is most memory efficient on avoiding swap cache-miss (I may/;"	m	class:Stack	typeref:typename:int[256][]	file:
superDigit	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/recursive_digit_sum_CPP/main.cpp	/^int superDigit(string n, int k) {$/;"	f	typeref:typename:int
superDigit	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/recursive_digit_sum_CPP/test.cpp	/^int superDigit(string n, int k) {$/;"	f	typeref:typename:int
tail	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^  SinglyLinkedListNode *tail;$/;"	m	class:SinglyLinkedList	typeref:typename:SinglyLinkedListNode *	file:
test	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/merge_sorted_list_CPP/main.cpp	/^void test() {$/;"	f	typeref:typename:void
test1	/home/hidekiai/projects/github/codePuzzlesAndPractices/amazon/test/test1/Program.cs	/^namespace test1$/;"	n
test2	/home/hidekiai/projects/github/codePuzzlesAndPractices/amazon/test/test2/Program.cs	/^namespace test2$/;"	n
testParts	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/NewYearChaos/NewYearChaos.cs	/^    static bool testParts(ref int[] q, ref int[] bribeCounts, int headIndex, int tailIndex)$/;"	m	class:Solution	file:
test_flippingMatrix	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/flip_matrix_CPP/main.cpp	/^void test_flippingMatrix() {$/;"	f	typeref:typename:void
total	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test1/main.cpp	/^    long long total;$/;"	m	class:MovingAverage	typeref:typename:long long	file:
towerBreakers	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tower_breaker_CPP/main.cpp	/^int towerBreakers(int number_of_towers, int each_tower_height) {$/;"	f	typeref:typename:int
transferAmount	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^	unsigned int transferAmount;$/;"	m	struct:Transfer	typeref:typename:unsigned int	file:
transferDirection	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^	TransferDirection transferDirection;$/;"	m	struct:Transfer	typeref:typename:TransferDirection	file:
transferThread	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^void transferThread($/;"	f	typeref:typename:void
truckTour	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/TruckTour_mockTest_CPP/main.cpp	/^int truckTour(vector<vector<int>> petrolpumps) {$/;"	f	typeref:typename:int
visit	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/tree_preorder_traversal_CPP/main.cpp	/^  void visit(Node *node) {$/;"	f	class:Solution	typeref:typename:void	file:
visitNode	/home/hidekiai/projects/github/codePuzzlesAndPractices/Pramp/practice/HTree/Program.cs	/^  static void visitNode(HTree current)$/;"	m	class:HelloWorld	file:
walk	/home/hidekiai/projects/github/codePuzzlesAndPractices/GeeksForGeeks/heightOfTree/heightOfTree.cpp	/^int walk(Node* node, int depth)$/;"	f	typeref:typename:int
~Avatar	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test3/main.cpp	/^    ~Avatar(){};$/;"	f	class:Avatar	file:
~MovingAverage	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test1/main.cpp	/^MovingAverage::~MovingAverage()$/;"	f	class:MovingAverage
~Stack	/home/hidekiai/projects/github/codePuzzlesAndPractices/HackerRank/.private/.Blizzard_Activision/Test2/main.cpp	/^    ~Stack(){};$/;"	f	class:Stack	file:
