// The four adjacent digits in the 1000-digit number that have the greatest product are
// 9 × 9 × 8 × 9 = 5832.
//      73167176531330624919225119674426574742355349194934
//      96983520312774506326239578318016984801869478851843
//      85861560789112949495459501737958331952853208805511
//      12540698747158523863050715693290963295227443043557
//      66896648950445244523161731856403098711121722383113
//      62229893423380308135336276614282806444486645238749
//      30358907296290491560440772390713810515859307960866
//      70172427121883998797908792274921901699720888093776
//      65727333001053367881220235421809751254540594752243
//      52584907711670556013604839586446706324415722155397
//      53697817977846174064955149290862569321978468622482
//      83972241375657056057490261407972968652414535100474
//      82166370484403199890008895243450658541227588666881
//      16427171479924442928230863465674813919123162824586
//      17866458359124566529476545682848912883142607690042
//      24219022671055626321111109370544217506941658960408
//      07198403850962455444362981230987879927244284909188
//      84580156166097919133875499200524063689912560717606
//      05886116467109405077541002256983155200055935729725
//      71636269561882670428252483600823257530420752963450
//      * NOTE: 50 digits per line, total of 20 lines => 1000 digits
// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
// What is the value of this product?

// Whiteboard:
// "four adjacent digits in 1000-digit number" means we need
// to pick the number (i.e. index=0) and inspect the next 3
// neighbors (i.e. index=1, index=2, index=3) and multiply,
// and compare against current max product. Then we move to
// the next number (i.e. index=1) and inspect the next 3
// and so on (until we get to  len() - 4).

// make sure the string has no spaces, linefeed, etc.
const NUMBERS: &str = "73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450";

const ADJACENT_COUNT: usize = 13;

fn do_it(adj: usize) -> i64 {
    let mut str_index = 0;
    let mut max_product = 0i64;
    while str_index < NUMBERS.len() - adj {
        let mut product = 1i64;
        for adj_index in 0..adj  {
            product *= NUMBERS
                .chars()
                .nth(str_index + adj_index)
                .unwrap()
                .to_digit(10)
                .unwrap() as i64;
        }
        if product > max_product {
            max_product = product;
        }
        str_index += 1;
    }
    max_product
}

fn main() {
    let max_product = do_it(ADJACENT_COUNT);
    // print the result
    println!(
        "The largest product of {} adjacent digits is: {}",
        ADJACENT_COUNT, max_product
    );
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_do_it() {
        let result = do_it(4);
        assert!(result == 5832);
    }
}
