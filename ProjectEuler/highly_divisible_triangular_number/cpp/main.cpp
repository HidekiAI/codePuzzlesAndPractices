// The sequence of triangle numbers is generated by adding the natural numbers.  So the 7th triangle number would be
// 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//      1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:
//        1: 1                   1 -> 1/1
//        3: 1,3                3 -> 3/1
//        6: 1,2,3,6            6 -> 6/1, 6/2, 6/3 (6 % 3 == 0, so it's a factor, 6 % 4 != 0, so it's not a factor)
//       10: 1,2,5,10           10 -> 10/1, 10/2, 10/5, 10/10
//       15: 1,3,5,15           15 -> 15/1, 15/3, 15/5, 15/15
//       21: 1,3,7,21
//       28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over five hundred divisors?

// Whiteboard:
// * I need a function that will generate the nth triangle number (sum of 1..n)
// * I need a function that will generate the factors of a number as vector (so I can count the length)

const int DIVISORS_THRESHOLD = 500;

#include <iostream> // cout
#include <vector>

int generateNthTriangleNumber(int n)
{
    return n * (n + 1) / 2;
}

int countFactors(int n)
{
    int count = 0;
    for (int i = 1; i <= n; i++)
    {
        if (n % i == 0)
        {
            count++;
        }
    }
    return count;
}

int main()
{
    //int n = 1;
    int n = 12200;  // NOTE: I already know that at 11900, Triangle=1707120 with 480 factor_count
    int triangleNumber = 0;
    int largest_so_far = 0;
    int largest_so_far_triangle = 0;
    while (true)
    {
        triangleNumber = generateNthTriangleNumber(n);
        int factors = countFactors(triangleNumber);
        if (factors > largest_so_far)
        {
            largest_so_far = factors;
            largest_so_far_triangle = triangleNumber;
            std::cout << "Triangle number " << triangleNumber << " has " << factors << " factors" << std::endl;
        }
        if (factors > DIVISORS_THRESHOLD)
        {
            break;
        }
        n++;
        if (n % 100 == 0)
        {
            std::cout << "Checking index number [" << n << ".." << n + 100 << "] - max so far: " << largest_so_far << " for Triangle=" << largest_so_far_triangle << std::endl;
        }
    }
    std::cout << "The first triangle number to have over " << DIVISORS_THRESHOLD << " divisors is " << triangleNumber << std::endl;
    return 0;
}
